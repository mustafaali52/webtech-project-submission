// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SWEEP.Data;

#nullable disable

namespace SWEEP.Migrations
{
    [DbContext(typeof(SweepDbContext))]
    partial class SweepDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SWEEP.Models.EmployerProfile", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("EmployerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("UserId");

                    b.ToTable("EmployerProfiles");
                });

            modelBuilder.Entity("SWEEP.Models.Field", b =>
                {
                    b.Property<int>("FieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FieldId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("FieldId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            FieldId = 1,
                            Name = "Computer Science"
                        },
                        new
                        {
                            FieldId = 2,
                            Name = "BBA"
                        },
                        new
                        {
                            FieldId = 3,
                            Name = "Marketing"
                        },
                        new
                        {
                            FieldId = 4,
                            Name = "Accounting"
                        },
                        new
                        {
                            FieldId = 5,
                            Name = "Data Science"
                        },
                        new
                        {
                            FieldId = 6,
                            Name = "Economics"
                        });
                });

            modelBuilder.Entity("SWEEP.Models.JobTask", b =>
                {
                    b.Property<int>("JobTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("JobTaskId"));

                    b.Property<int>("Complexity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("FieldId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MonetaryCompensation")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("RequiresExperience")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("JobTaskId");

                    b.HasIndex("FieldId");

                    b.HasIndex("UserId");

                    b.ToTable("JobTasks");
                });

            modelBuilder.Entity("SWEEP.Models.RefreshToken", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TokenId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReplacedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("TokenId");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("SWEEP.Models.StudentProfile", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<decimal>("CGPA")
                        .HasColumnType("decimal(3,2)");

                    b.Property<int>("FieldId")
                        .HasColumnType("integer");

                    b.Property<int>("GraduationYear")
                        .HasColumnType("integer");

                    b.Property<int>("PriorExperienceYears")
                        .HasColumnType("integer");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TokenBalance")
                        .HasColumnType("integer");

                    b.Property<string>("University")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("UserId");

                    b.HasIndex("FieldId");

                    b.ToTable("StudentProfiles");
                });

            modelBuilder.Entity("SWEEP.Models.TaskAssignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AssignmentId"));

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("JobTaskId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("TokensAwarded")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("AssignmentId");

                    b.HasIndex("UserId");

                    b.HasIndex("JobTaskId", "UserId")
                        .IsUnique();

                    b.ToTable("TaskAssignments");
                });

            modelBuilder.Entity("SWEEP.Models.TaskAttachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AttachmentId"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("JobTaskId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AttachmentId");

                    b.HasIndex("JobTaskId");

                    b.ToTable("TaskAttachments");
                });

            modelBuilder.Entity("SWEEP.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("ClerkId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("bytea");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SWEEP.Models.EmployerProfile", b =>
                {
                    b.HasOne("SWEEP.Models.User", "User")
                        .WithOne("EmployerProfile")
                        .HasForeignKey("SWEEP.Models.EmployerProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SWEEP.Models.JobTask", b =>
                {
                    b.HasOne("SWEEP.Models.Field", "Field")
                        .WithMany("JobTasks")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWEEP.Models.EmployerProfile", "Employer")
                        .WithMany("JobTasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employer");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("SWEEP.Models.RefreshToken", b =>
                {
                    b.HasOne("SWEEP.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SWEEP.Models.StudentProfile", b =>
                {
                    b.HasOne("SWEEP.Models.Field", "Field")
                        .WithMany("StudentProfiles")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWEEP.Models.User", "User")
                        .WithOne("StudentProfile")
                        .HasForeignKey("SWEEP.Models.StudentProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SWEEP.Models.TaskAssignment", b =>
                {
                    b.HasOne("SWEEP.Models.JobTask", "JobTask")
                        .WithMany("TaskAssignments")
                        .HasForeignKey("JobTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SWEEP.Models.StudentProfile", "Student")
                        .WithMany("TaskAssignments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobTask");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SWEEP.Models.TaskAttachment", b =>
                {
                    b.HasOne("SWEEP.Models.JobTask", "JobTask")
                        .WithMany("Attachments")
                        .HasForeignKey("JobTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobTask");
                });

            modelBuilder.Entity("SWEEP.Models.EmployerProfile", b =>
                {
                    b.Navigation("JobTasks");
                });

            modelBuilder.Entity("SWEEP.Models.Field", b =>
                {
                    b.Navigation("JobTasks");

                    b.Navigation("StudentProfiles");
                });

            modelBuilder.Entity("SWEEP.Models.JobTask", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("TaskAssignments");
                });

            modelBuilder.Entity("SWEEP.Models.StudentProfile", b =>
                {
                    b.Navigation("TaskAssignments");
                });

            modelBuilder.Entity("SWEEP.Models.User", b =>
                {
                    b.Navigation("EmployerProfile");

                    b.Navigation("RefreshTokens");

                    b.Navigation("StudentProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
